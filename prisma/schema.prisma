generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("DB_SHADOW_URL")
}

model Account {
  id                               Int                     @id @default(autoincrement())
  email                            String                  @unique
  password                         String
  isAccountDisabled                Boolean                 @default(false)
  isAccountVerified                Boolean                 @default(false)
  createdAt                        DateTime?               @default(now())
  updatedAt                        DateTime?               @default(now()) @updatedAt
  files                            File[]
  profile                          Profile?
  tokens                           Token[]
  organizationOwners               Organization[]          @relation(name: "organizationOwner")
  members                          Member[]                @relation(name: "memberAccount")
  memberCensors                    Member[]                @relation(name: "memberCensor")
  activityManagers                 ActivityManager[]
  organizationVerifiers            Organization[]          @relation(name: "organizationVerifier")
  volunteerSkills                  VolunteerSkill[]
  volunteerShifts                  VolunteerShift[]        @relation(name: "volunteerShiftAccount")
  volunteerShiftCensors            VolunteerShift[]        @relation(name: "volunteerShiftCensor")
  shiftManagers                    ShiftManager[]
  accountRoles                     AccountRole[]
  accountBannedBy                  AccountBan[]            @relation(name: "accountBannedBy")
  accountBan                       AccountBan[]            @relation(name: "accountBan")
  accountVerifiedBy                AccountVerification[]   @relation(name: "accountVerifiedBy")
  accountVerification              AccountVerification[]   @relation(name: "accountVerification")
  volunteerShiftCheckInOutVerifier VolunteerShift[]        @relation(name: "volunteerShiftCheckInOutVerifier")
  volunteerShiftReviewer           VolunteerShift[]        @relation(name: "volunteerShiftReviewer")
  notification                     Notification[]
  report                           Report[]                @relation(name: "reporter")
  reviewReport                     Report[]                @relation(name: "reportReviewer")
  reportedAccount                  ReportAccount[]         @relation(name: "reportedAccount")
  reportMessage                    ReportMessage[]         @relation(name: "reportMessageSender")
  Chat                             Chat[]                  @relation(name: "createdByAccount")
  ChatParticipant                  ChatParticipant[]
  BlockedChat                      Chat[]                  @relation(name: "blockedByAccount")
  ActivitySearchHistory            ActivitySearchHistory[]
  GrantMemberRole                  MemberRole[]            @relation(name: "memberRoleGrantedBy")
  DisableOrganization              Organization[]          @relation(name: "organizationBannedBy")
  DisableActivity                  Activity[]              @relation(name: "activityBannedBy")
}

model Role {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  displayName  String?
  description  String?
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @default(now()) @updatedAt
  accountRoles AccountRole[]
  MemberRole   MemberRole[]
}

model Profile {
  accountId               Int                      @id @unique
  account                 Account                  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  username                String?
  firstName               String?
  lastName                String?
  dateOfBirth             DateTime?
  gender                  String?
  bio                     String?
  phoneNumber             String?
  locationId              Int?                     @unique
  location                Location?                @relation(fields: [locationId], references: [id], onDelete: SetNull)
  avatarId                Int?                     @unique
  avatar                  File?                    @relation(fields: [avatarId], references: [id], onDelete: SetNull)
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @default(now()) @updatedAt
  profileInterestedSkills ProfileInterestedSkill[]
  ProfileSkill            ProfileSkill[]
}

model Token {
  accountId Int
  type      String
  token     String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  deletedAt DateTime?
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@id([accountId, type])
}

model File {
  id                      Int                      @id @default(autoincrement())
  name                    String
  internalName            String                   @unique
  mimetype                String?
  path                    String
  size                    Float
  sizeUnit                String
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @default(now()) @updatedAt
  createdBy               Int
  account                 Account                  @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organizationLogo        Organization?            @relation(name: "logo")
  organizationBanner      Organization?            @relation(name: "banner")
  organizationFile        OrganizationFile?
  profile                 Profile?
  activityThumbnail       Activity?
  accountVerificationFile AccountVerificationFile?
  reportMessageFile       ReportMessageFile?
}

model Location {
  id                   Int                   @id @default(autoincrement())
  addressLine1         String?
  addressLine2         String?
  locality             String?
  region               String?
  country              String?
  latitude             Float?
  longitude            Float?
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @default(now()) @updatedAt
  organizationLocation OrganizationLocation?
  profile              Profile?
  shiftLocation        ShiftLocation?
  ActivityLocation     ActivityLocation?
}

model Contact {
  id                  Int                  @id @default(autoincrement())
  name                String
  phoneNumber         String?
  email               String?
  organizationContact OrganizationContact?
  shiftContact        ShiftContact?
  activityContact     ActivityContact[]
}

model Organization {
  id                     Int                    @id @default(autoincrement())
  name                   String?
  phoneNumber            String?
  email                  String?
  description            String?
  website                String?
  status                 String                 @default("pending")
  isDisabled             Boolean                @default(false)
  disabledBy             Int?
  disabledByAccount      Account?               @relation(name: "organizationBannedBy", fields: [disabledBy], references: [id], onDelete: SetNull)
  logo                   Int?                   @unique
  logoRelation           File?                  @relation(name: "logo", fields: [logo], references: [id], onDelete: SetNull)
  banner                 Int?                   @unique
  bannerRelation         File?                  @relation(name: "banner", fields: [banner], references: [id], onDelete: SetNull)
  createdAt              DateTime?              @default(now())
  updatedAt              DateTime?              @default(now()) @updatedAt
  ownerId                Int
  owner                  Account                @relation(name: "organizationOwner", fields: [ownerId], references: [id])
  verifierId             Int?
  verifier               Account?               @relation(name: "organizationVerifier", fields: [verifierId], references: [id])
  verifierComment        String?
  organizationFiles      OrganizationFile[]
  organizationLocations  OrganizationLocation[]
  organizationContacts   OrganizationContact[]
  members                Member[]
  organizationActivities Activity[]
  organizationSkills     OrganizationSkill[]
  reportedOrganization   ReportOrganization[]   @relation(name: "reportedOrganization")
  Notification           Notification[]
}

model Skill {
  id                      Int                      @id @default(autoincrement())
  name                    String
  description             String?
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @default(now()) @updatedAt
  shiftSkills             ShiftSkill[]
  shiftSkillValue         ShiftSkillValue[]
  volunteerSkills         VolunteerSkill[]
  profileInterestedSkills ProfileInterestedSkill[]
  organizationSkills      OrganizationSkill[]
  activitySkills          ActivitySkill[]
  ProfileSkill            ProfileSkill[]
}

model Activity {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  isDisabled        Boolean            @default(false)
  disabledBy        Int?
  disabledByAccount Account?           @relation(name: "activityBannedBy", fields: [disabledBy], references: [id], onDelete: SetNull)
  status            String             @default("pending")
  startTime         DateTime?
  endTime           DateTime?
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @default(now()) @updatedAt
  thumbnail         Int?               @unique
  activityThumbnail File?              @relation(fields: [thumbnail], references: [id], onDelete: SetNull)
  organizationId    Int
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  shifts            Shift[]
  activityManagers  ActivityManager[]
  activitySkills    ActivitySkill[]
  activityContacts  ActivityContact[]
  reportedActivity  ReportActivity[]   @relation(name: "reportedActivity")
  notification      Notification[]
  ActivityLocation  ActivityLocation[]
}

model Shift {
  id                    Int               @id @default(autoincrement())
  name                  String
  description           String?
  startTime             DateTime
  endTime               DateTime
  status                String            @default("pending")
  automaticStatusUpdate Boolean           @default(true)
  numberOfParticipants  Int?
  availableSlots        Int?
  joinedParticipants    Int               @default(0)
  checkInMinutesLimit   Int?
  checkOutMinutesLimit  Int?
  createdAt             DateTime?         @default(now())
  updatedAt             DateTime?         @default(now()) @updatedAt
  activityId            Int
  activity              Activity          @relation(fields: [activityId], references: [id], onDelete: Cascade)
  shiftLocations        ShiftLocation[]
  shiftContacts         ShiftContact[]
  shiftSkills           ShiftSkill[]
  shiftVolunteers       VolunteerShift[]
  shiftManagers         ShiftManager[]
  shiftMetadata         ShiftMetadata?
  shiftSkillValue       ShiftSkillValue[]
  notification          Notification[]
}

model ShiftMetadata {
  id                 Int       @id @unique
  joinedParticipants Int
  availableSlots     Int?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @default(now()) @updatedAt
  shift              Shift     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Notification {
  id               Int           @id @default(autoincrement())
  accountId        Int
  account          Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  type             String
  from             String?
  title            String
  description      String
  shortDescription String?
  read             Boolean       @default(false)
  pushOnly         Boolean       @default(false)
  activityId       Int?
  activity         Activity?     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  shiftId          Int?
  shift            Shift?        @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  organizationId   Int?
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reportId         Int?
  report           Report?       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
}

model Chat {
  id               Int               @id @default(autoincrement())
  name             String?
  isBlocked        Boolean           @default(false)
  blockedBy        Int?
  blockedByAccount Account?          @relation(name: "blockedByAccount", fields: [blockedBy], references: [id], onDelete: Cascade)
  blockedAt        DateTime?
  isGroup          Boolean           @default(false)
  createdBy        Int
  createdByAccount Account           @relation(name: "createdByAccount", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  ChatMessage      ChatMessage[]
  ChatParticipant  ChatParticipant[]
}

model ChatParticipant {
  id          Int           @id @default(autoincrement())
  chatId      Int
  Chat        Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  accountId   Int
  Account     Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  read        Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  ChatMessage ChatMessage[]
}

model ChatMessage {
  id        Int             @id @default(autoincrement())
  chatId    Int
  Chat      Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    Int
  Sender    ChatParticipant @relation(fields: [sender], references: [id], onDelete: Cascade)
  message   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
}

model Report {
  id                 Int                 @id @default(autoincrement())
  reporterId         Int
  reporter           Account             @relation(name: "reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewerId         Int?
  reviewer           Account?            @relation(name: "reportReviewer", fields: [reviewerId], references: [id], onDelete: SetNull)
  type               String
  title              String
  status             String              @default("pending")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  reportMessage      ReportMessage[]
  reportAccount      ReportAccount?
  reportOrganization ReportOrganization?
  reportActivity     ReportActivity?
  notification       Notification[]
}

model ReportAccount {
  id                Int     @id @unique
  report            Report  @relation(fields: [id], references: [id], onDelete: Cascade)
  reportedAccountId Int
  reportedAccount   Account @relation(name: "reportedAccount", fields: [reportedAccountId], references: [id], onDelete: Cascade)
}

model ReportOrganization {
  id                     Int          @id @unique
  report                 Report       @relation(fields: [id], references: [id], onDelete: Cascade)
  reportedOrganizationId Int
  reportedOrganization   Organization @relation(name: "reportedOrganization", fields: [reportedOrganizationId], references: [id], onDelete: Cascade)
}

model ReportActivity {
  id                 Int      @id @unique
  report             Report   @relation(fields: [id], references: [id], onDelete: Cascade)
  reportedActivityId Int
  reportedActivity   Activity @relation(name: "reportedActivity", fields: [reportedActivityId], references: [id], onDelete: Cascade)
}

model ReportMessage {
  id        Int                 @id @default(autoincrement())
  reportId  Int
  report    Report              @relation(fields: [reportId], references: [id], onDelete: Cascade)
  content   String
  senderId  Int
  sender    Account             @relation(name: "reportMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  file      ReportMessageFile[]
  first     Boolean             @default(false)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
}

model ReportMessageFile {
  reportMessageId Int
  reportMessage   ReportMessage @relation(fields: [reportMessageId], references: [id], onDelete: Cascade)
  fileId          Int           @id @unique
  file            File          @relation(fields: [fileId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
}

model AccountBan {
  id                 Int       @id @default(autoincrement())
  accountId          Int
  account            Account   @relation(name: "accountBan", fields: [accountId], references: [id], onDelete: Cascade)
  performedBy        Int
  performedByAccount Account   @relation(name: "accountBannedBy", fields: [performedBy], references: [id], onDelete: Cascade)
  isBanned           Boolean
  note               String?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @default(now()) @updatedAt
}

model AccountVerification {
  id                      Int                       @id @default(autoincrement())
  accountId               Int
  account                 Account                   @relation(name: "accountVerification", fields: [accountId], references: [id], onDelete: Cascade)
  performedBy             Int?
  performedByAccount      Account?                  @relation(name: "accountVerifiedBy", fields: [performedBy], references: [id], onDelete: Cascade)
  status                  String                    @default("pending")
  isVerified              Boolean
  content                 String?
  note                    String?
  createdAt               DateTime?                 @default(now())
  updatedAt               DateTime?                 @default(now()) @updatedAt
  accountVerificationFile AccountVerificationFile[]
}

model AccountRole {
  accountId Int
  roleId    Int
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@id([accountId, roleId])
}

model AccountVerificationFile {
  accountVerificationId Int
  fileId                Int                 @id @unique
  accountVerification   AccountVerification @relation(fields: [accountVerificationId], references: [id], onDelete: Cascade)
  file                  File                @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model ProfileInterestedSkill {
  profileId Int
  skillId   Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  profile Profile @relation(fields: [profileId], references: [accountId], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([profileId, skillId])
}

model ProfileSkill {
  profileId Int
  skillId   Int
  hours     Float
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  profile Profile @relation(fields: [profileId], references: [accountId], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([profileId, skillId])
}

model OrganizationFile {
  organizationId Int
  fileId         Int          @id @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  file           File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model OrganizationLocation {
  organizationId Int
  locationId     Int          @id @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  location       Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model OrganizationContact {
  organizationId Int
  contactId      Int          @id @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contact        Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model OrganizationSkill {
  organizationId Int
  skillId        Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  skill          Skill        @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @default(now()) @updatedAt

  @@id([organizationId, skillId])
}

model Member {
  id              Int          @id @default(autoincrement())
  accountId       Int
  organizationId  Int
  status          String
  account         Account      @relation(name: "memberAccount", fields: [accountId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  censorId        Int?
  censor          Account?     @relation(name: "memberCensor", fields: [censorId], references: [id], onDelete: SetNull)
  rejectionReason String?
  createdAt       DateTime?    @default(now())
  updatedAt       DateTime?    @default(now()) @updatedAt
  MemberRole      MemberRole[]
}

model MemberRole {
  memberId        Int
  roleId          Int
  member          Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  role            Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  grantedBy       Int?
  grantedByMember Account?  @relation(name: "memberRoleGrantedBy", fields: [grantedBy], references: [id], onDelete: SetNull)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @default(now()) @updatedAt

  @@id([memberId, roleId])
}

model ActivitySkill {
  activityId Int
  skillId    Int
  activity   Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  skill      Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt

  @@id([activityId, skillId])
}

model ActivityManager {
  activityId Int
  accountId  Int
  activity   Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  account    Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt

  @@id([activityId, accountId])
}

model ActivityContact {
  activityId Int
  contactId  Int
  activity   Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  contact    Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt

  @@id([activityId, contactId])
}

model ActivityLocation {
  activityId Int
  locationId Int       @id @unique
  Activity   Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  Location   Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
}

model VolunteerSkill {
  accountId Int
  skillId   Int
  hours     Float
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@id([accountId, skillId])
}

model ShiftLocation {
  shiftId    Int
  locationId Int       @id @unique
  shift      Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  location   Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
}

model ShiftContact {
  shiftId   Int
  contactId Int       @id @unique
  shift     Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  contact   Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model ShiftSkill {
  shiftId   Int
  skillId   Int
  hours     Float
  shift     Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@id([shiftId, skillId])
}

model ShiftSkillValue {
  shiftId   Int
  skillId   Int
  hours     Float
  shift     Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@id([shiftId, skillId])
}

model VolunteerShift {
  id                    Int       @id @default(autoincrement())
  shiftId               Int
  shift                 Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  accountId             Int
  account               Account   @relation(name: "volunteerShiftAccount", fields: [accountId], references: [id], onDelete: Cascade)
  status                String
  active                Boolean   @default(true)
  rejectionReason       String?
  censorId              Int?
  censor                Account?  @relation(name: "volunteerShiftCensor", fields: [censorId], references: [id], onDelete: SetNull)
  meetSkillRequirements Boolean   @default(false)
  checkedIn             Boolean?
  checkedOut            Boolean?
  checkInAt             DateTime?
  checkOutAt            DateTime?
  isCheckInVerified     Boolean?
  isCheckOutVerified    Boolean?
  checkInOutVerifierId  Int?
  checkInOutVerifier    Account?  @relation(name: "volunteerShiftCheckInOutVerifier", fields: [checkInOutVerifierId], references: [id], onDelete: SetNull)
  completion            Float?
  reviewNote            String?
  reviewerId            Int?
  reviewer              Account?  @relation(name: "volunteerShiftReviewer", fields: [reviewerId], references: [id], onDelete: SetNull)
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @default(now()) @updatedAt
}

model ShiftManager {
  shiftId     Int
  accountId   Int
  name        String?
  description String?
  shift       Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@id([shiftId, accountId])
}

model ActivitySearchHistory {
  id        Int      @id @default(autoincrement())
  accountId Int
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  query     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
