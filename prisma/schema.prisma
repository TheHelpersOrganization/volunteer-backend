generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "filteredRelationCount"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("DB_SHADOW_URL")
}

model Account {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  password              String
  isAccountDisabled     Boolean               @default(false)
  isAccountVerified     Boolean               @default(false)
  createdAt             DateTime?             @default(now())
  updatedAt             DateTime?             @default(now()) @updatedAt
  files                 File[]
  profile               Profile?
  tokens                Token[]
  organizationOwners    Organization[]        @relation(name: "organizationOwner")
  members               Member[]              @relation(name: "memberAccount")
  memberCensors         Member[]              @relation(name: "memberCensor")
  activityManagers      ActivityManager[]
  organizationVerifiers Organization[]        @relation(name: "organizationVerifier")
  volunteerSkills       VolunteerSkill[]
  volunteerShifts       VolunteerShift[]      @relation(name: "volunteerShiftAccount")
  volunteerShiftCensors VolunteerShift[]      @relation(name: "volunteerShiftCensor")
  shiftManagers         ShiftManager[]
  accountRoles          AccountRole[]
  accountBannedBy       AccountBan[]          @relation(name: "accountBannedBy")
  accountBan            AccountBan[]          @relation(name: "accountBan")
  accountVerifiedBy     AccountVerification[] @relation(name: "accountVerifiedBy")
  accountVerification   AccountVerification[] @relation(name: "accountVerification")
}

model Role {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @default(now()) @updatedAt
  accountRoles AccountRole[]
}

model Profile {
  accountId               Int                      @id @unique
  account                 Account                  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  username                String?
  firstName               String?
  lastName                String?
  dateOfBirth             DateTime?
  gender                  String?
  bio                     String?
  phoneNumber             String?
  locationId              Int?                     @unique
  location                Location?                @relation(fields: [locationId], references: [id], onDelete: SetNull)
  avatarId                Int?                     @unique
  avatar                  File?                    @relation(fields: [avatarId], references: [id], onDelete: SetNull)
  profileInterestedSkills ProfileInterestedSkill[]
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @default(now()) @updatedAt
}

model Token {
  accountId Int
  type      String
  token     String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  deletedAt DateTime?
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@id([accountId, type])
}

model File {
  id                      Int                      @id @default(autoincrement())
  name                    String
  internalName            String                   @unique
  mimetype                String?
  path                    String
  size                    Float
  sizeUnit                String
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @default(now()) @updatedAt
  createdBy               Int
  account                 Account                  @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  organizationLogo        Organization?            @relation(name: "logo")
  organizationBanner      Organization?            @relation(name: "banner")
  organizationFile        OrganizationFile?
  profile                 Profile?
  activityThumbnail       Activity?
  accountVerificationFile AccountVerificationFile?
}

model Location {
  id                   Int                   @id @default(autoincrement())
  addressLine1         String?
  addressLine2         String?
  locality             String?
  region               String?
  country              String?
  latitude             Float?
  longitude            Float?
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @default(now()) @updatedAt
  organizationLocation OrganizationLocation?
  profile              Profile?
  shiftLocation        ShiftLocation?
}

model Contact {
  id                  Int                  @id @default(autoincrement())
  name                String
  phoneNumber         String?
  email               String?
  organizationContact OrganizationContact?
  shiftContact        ShiftContact?
  activityContact     ActivityContact[]
}

model Organization {
  id                     Int                    @id @default(autoincrement())
  name                   String?
  phoneNumber            String?
  email                  String?
  description            String?
  website                String?
  status                 String                 @default("pending")
  isDisabled             Boolean                @default(false)
  logo                   Int?                   @unique
  logoRelation           File?                  @relation(name: "logo", fields: [logo], references: [id], onDelete: SetNull)
  banner                 Int?                   @unique
  bannerRelation         File?                  @relation(name: "banner", fields: [banner], references: [id], onDelete: SetNull)
  createdAt              DateTime?              @default(now())
  updatedAt              DateTime?              @default(now()) @updatedAt
  ownerId                Int
  owner                  Account                @relation(name: "organizationOwner", fields: [ownerId], references: [id])
  verifierId             Int?
  verifier               Account?               @relation(name: "organizationVerifier", fields: [verifierId], references: [id])
  verifierComment        String?
  organizationFiles      OrganizationFile[]
  organizationLocations  OrganizationLocation[]
  organizationContacts   OrganizationContact[]
  members                Member[]
  organizationActivities Activity[]
  organizationSkills     OrganizationSkill[]
}

model Skill {
  id                      Int                      @id @default(autoincrement())
  name                    String
  description             String?
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @default(now()) @updatedAt
  shiftSkills             ShiftSkill[]
  volunteerSkills         VolunteerSkill[]
  profileInterestedSkills ProfileInterestedSkill[]
  organizationSkills      OrganizationSkill[]
  activitySkills          ActivitySkill[]
}

model Activity {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  isDisabled        Boolean           @default(false)
  status            String            @default("pending")
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @default(now()) @updatedAt
  thumbnail         Int?              @unique
  activityThumbnail File?             @relation(fields: [thumbnail], references: [id], onDelete: SetNull)
  organizationId    Int
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  shifts            Shift[]
  activityManagers  ActivityManager[]
  activitySkills    ActivitySkill[]
  activityContacts  ActivityContact[]
}

model Shift {
  id                   Int              @id @default(autoincrement())
  name                 String
  description          String?
  startTime            DateTime
  endTime              DateTime
  numberOfParticipants Int?
  createdAt            DateTime?        @default(now())
  updatedAt            DateTime?        @default(now()) @updatedAt
  activityId           Int
  activity             Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  shiftLocations       ShiftLocation[]
  shiftContacts        ShiftContact[]
  shiftSkills          ShiftSkill[]
  shiftVolunteers      VolunteerShift[]
  shiftManagers        ShiftManager[]
}

model ShiftMetadata {
  id                Int       @id @unique
  joinedParticpants Int
  availableSlots    Int
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @default(now()) @updatedAt
}

model AccountBan {
  id                 Int       @id @default(autoincrement())
  accountId          Int
  account            Account   @relation(name: "accountBan", fields: [accountId], references: [id], onDelete: Cascade)
  performedBy        Int
  performedByAccount Account   @relation(name: "accountBannedBy", fields: [performedBy], references: [id], onDelete: Cascade)
  isBanned           Boolean
  note               String?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @default(now()) @updatedAt
}

model AccountVerification {
  id                      Int                       @id @default(autoincrement())
  accountId               Int
  account                 Account                   @relation(name: "accountVerification", fields: [accountId], references: [id], onDelete: Cascade)
  performedBy             Int?
  performedByAccount      Account?                  @relation(name: "accountVerifiedBy", fields: [performedBy], references: [id], onDelete: Cascade)
  status                  String                    @default("pending")
  isVerified              Boolean
  content                 String?
  note                    String?
  createdAt               DateTime?                 @default(now())
  updatedAt               DateTime?                 @default(now()) @updatedAt
  accountVerificationFile AccountVerificationFile[]
}

model AccountRole {
  accountId Int
  roleId    Int
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@id([accountId, roleId])
}

model AccountVerificationFile {
  accountVerificationId Int
  fileId                Int                 @id @unique
  accountVerification   AccountVerification @relation(fields: [accountVerificationId], references: [id], onDelete: Cascade)
  file                  File                @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model ProfileInterestedSkill {
  profileId Int
  skillId   Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  profile Profile @relation(fields: [profileId], references: [accountId], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([profileId, skillId])
}

model OrganizationFile {
  organizationId Int
  fileId         Int          @id @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  file           File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model OrganizationLocation {
  organizationId Int
  locationId     Int          @id @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  location       Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model OrganizationContact {
  organizationId Int
  contactId      Int          @id @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contact        Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model OrganizationSkill {
  organizationId Int
  skillId        Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  skill          Skill        @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @default(now()) @updatedAt

  @@id([organizationId, skillId])
}

model Member {
  id              Int          @id @default(autoincrement())
  accountId       Int
  organizationId  Int
  status          String
  account         Account      @relation(name: "memberAccount", fields: [accountId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  censorId        Int?
  censor          Account?     @relation(name: "memberCensor", fields: [censorId], references: [id], onDelete: SetNull)
  rejectionReason String?
  createdAt       DateTime?    @default(now())
  updatedAt       DateTime?    @default(now()) @updatedAt
}

model ActivitySkill {
  activityId Int
  skillId    Int
  activity   Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  skill      Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt

  @@id([activityId, skillId])
}

model ActivityManager {
  activityId Int
  accountId  Int
  activity   Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  account    Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt

  @@id([activityId, accountId])
}

model ActivityContact {
  activityId Int
  contactId  Int
  activity   Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  contact    Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt

  @@id([activityId, contactId])
}

model VolunteerSkill {
  accountId Int
  skillId   Int
  hours     Float
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@id([accountId, skillId])
}

model ShiftLocation {
  shiftId    Int
  locationId Int       @id @unique
  shift      Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  location   Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
}

model ShiftContact {
  shiftId   Int
  contactId Int       @id @unique
  shift     Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  contact   Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model ShiftSkill {
  shiftId   Int
  skillId   Int
  hours     Float
  shift     Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@id([shiftId, skillId])
}

model VolunteerShift {
  id              Int       @id @default(autoincrement())
  shiftId         Int
  accountId       Int
  attendant       Boolean   @default(false)
  status          String
  completion      Float     @default(0)
  censorId        Int?
  shift           Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  account         Account   @relation(name: "volunteerShiftAccount", fields: [accountId], references: [id], onDelete: Cascade)
  censor          Account?  @relation(name: "volunteerShiftCensor", fields: [censorId], references: [id], onDelete: SetNull)
  rejectionReason String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @default(now()) @updatedAt
}

model ShiftManager {
  shiftId     Int
  accountId   Int
  name        String?
  description String?
  shift       Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@id([shiftId, accountId])
}
